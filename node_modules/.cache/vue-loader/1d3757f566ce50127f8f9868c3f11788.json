{"remainingRequest":"/Users/11356979/upload-death-certificate-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/11356979/upload-death-certificate-project/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"/Users/11356979/upload-death-certificate-project/src/components/HelloWorld.vue","mtime":1606723813880},{"path":"/Users/11356979/upload-death-certificate-project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/11356979/upload-death-certificate-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/11356979/upload-death-certificate-project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/11356979/upload-death-certificate-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/11356979/upload-death-certificate-project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUthbml0OndnaHRAMjAwJmRpc3BsYXk9c3dhcCcpOwoKLmJnLWNhbnZhcyB7CiAgaGVpZ2h0OiA5NyU7CiAgd2lkdGg6IDYwJTsKICBtYXJnaW46IGF1dG87CiAgcGFkZGluZy10b3A6IDIwcHg7Cn0KCmgzIHsKICBtYXJnaW46IDQwcHggMCAwOwp9CnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQpsaSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG1hcmdpbjogMCAxMHB4Owp9CmEgewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"row\">\n        <div class=\"col mb-3\">\n          <input type=\"file\" id=\"imageLoader\" class=\"my-2\" @change=\"updateCanvasImage\"/>\n          <input type=\"date\" id=\"dateSelector\" class=\"my-2\" />\n          <div style=\"background-color:black;\" class=\"bg-canvas\">\n            <canvas id=\"imageCanvas\" ref=\"imageCanvas\" style=\"background-color:white;\" width=\"600\" height=\"850\"></canvas>\n            <div><button type=\"button\" class=\"btn btn-light btn-lg\" @click=\"goToResultImagePage\">Next</button></div>\n        </div>\n        </div>\n    </div>\n</template> \n\n<script>\n//import white_bg from \"../assets/white_bg.jpg\";\n\nexport default {\n    data:function(){\n      return {thaiDate : ['๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙', '๑๐', \n                  '๑๑', '๑๒', '๑๓', '๑๔', '๑๕', '๑๖', '๑๗', '๑๘', '๑๙', '๒๐', \n                  '๒๑', '๒๒', '๒๓', '๒๔', '๒๕', '๒๖', '๒๗', '๒๘', '๒๙', '๓๐', '๓๑'],\n              thaiNumber : ['๐', '๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙'],\n              imgPathFromCanvas : \"\"\n              // birthDate,\n              // deathDate\n      }\n    },\n    methods: {\n        updateCanvasImage(e) {\n            var self = this;\n            var reader, files = e.target.files;\n            reader = new FileReader();\n \n            reader.onload = (e) => {\n                var img = new Image();\n                img.onload = function() {\n                    self.drawCanvasImage(img)\n                }\n                img.src = e.target.result;\n            };\n \n            reader.readAsDataURL(files[0]);\n \n        },\n        goToResultImagePage(){\n          alert(this.imgPathFromCanvas);\n        },\n \n        drawCanvasImage(img) {\n            var canvas = this.$refs.imageCanvas;\n            canvas.width = 550;\n            canvas.height = 800;\n \n            var ctx = canvas.getContext('2d');\n            ctx.font = \"2rem Kanit\";\n            ctx.textAlign = \"center\";\n            ctx.fillText(this.getBirthDateString(\"July 21, 1983 01:15:00\"), canvas.width/2, 570);\n            ctx.fillText(this.getDeathDateString(), canvas.width/2, 650);\n            ctx.drawImage(img, 50, 50, 450, 450);\n            var imagePath = canvas.toDataURL(\"image/png\");\n            this.imgPathFromCanvas = imagePath;\n        },\n\n        getBirthDateString(datetime){\n          const options = {year: 'numeric', month: 'long', day: 'numeric' };\n          datetime = new Date(datetime).toLocaleDateString('th-TH', options);\n          var dateArr = datetime.split(\" \");\n          var date = this.thaiDate[dateArr[0]];\n          var month = dateArr[1];\n          var year = this.getThaiYear(dateArr[2]);\n          return `ชาตะ ${date} ${month} พ.ศ. ${year}`;\n        },\n\n        getDeathDateString(){\n          return `มรณะ ๑๙ ธันวาคม พ.ศ. ๒๕๖๓`;\n        },\n        \n        getThaiYear(year){\n          var yearArr = year.split('');\n          yearArr.forEach((element, index) => {\n            yearArr[index] = this.thaiNumber[element];\n          });\n          return yearArr.join('');\n        }\n    }\n}\n</script>\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Kanit:wght@200&display=swap');\n\n.bg-canvas {\n  height: 97%;\n  width: 60%;\n  margin: auto;\n  padding-top: 20px;\n}\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}